[{"properties":{"post_type":["attachment"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"LayerSlider 5 responsive demo slider","width":"1280","height":"720","responsive":"on","maxwidth":"1280","responsiveunder":"0","sublayercontainer":"0","autostart":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","skin":"v5","backgroundcolor":"","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","hoverprevnext":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","lazyload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: -10px; top: -10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) {\r\n\r\n}","cbstart":"function(data) {\r\n\r\n}","cbstop":"function(data) {\r\n\r\n}","cbpause":"function(data) {\r\n\r\n}","cbanimstart":"function(data) {\r\n\r\n}","cbanimstop":"function(data) {\r\n\r\n}","cbprev":"function(data) {\r\n\r\n}","cbnext":"function(data) {\r\n\r\n}"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"75,79","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"55","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"fading background","media":"img","type":"p","imageId":"786","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/bg21.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"6000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"kreatura media","media":"text","type":"h1","imageId":"","image":"","html":"KREATURA MEDIA","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"400\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"40\\\",\\\"color\\\":\\\"#286e89\\\"}","top":"60px","left":"800px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"presents","media":"text","type":"h2","imageId":"","image":"","html":"presents","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-60\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"60\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#fa6b4b\\\"}","top":"100","left":"801","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-1","media":"img","type":"p","imageId":"61","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-d-5-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"right -50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"450px","left":"100px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-2","media":"img","type":"p","imageId":"62","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-d-5-6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left -50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"450px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-3","media":"img","type":"p","imageId":"60","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-d-5-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"1\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"300px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-4","media":"img","type":"p","imageId":"59","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-d-5-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1900\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-90\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"300px","left":"100px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-5","media":"img","type":"p","imageId":"57","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-d-5-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"2200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"right 150% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"150px","left":"100px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-6","media":"img","type":"p","imageId":"58","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-d-5-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 150% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"150px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"layerslider","media":"text","type":"h1","imageId":"","image":"","html":"LAYERSLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"340px\\\",\\\"font-family\\\":\\\"Oswald, Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"60px\\\",\\\"color\\\":\\\"#a14730\\\",\\\"border-radius\\\":\\\"5px\\\"}","top":"65px","left":"80px","style":"font-weight: 500; text-align: center; opacity: .5;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"dynamic slider","media":"text","type":"p","imageId":"","image":"","html":"DYNAMIC SLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"150px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"from your","media":"text","type":"p","imageId":"","image":"","html":"from your <span style=\\\"font-weight: 500; color: #555;\\\">WordPress posts<\/span> and pages","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"190px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"timeline","media":"text","type":"p","imageId":"","image":"","html":"TIMELINE VIEW","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"250px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for better","media":"text","type":"p","imageId":"","image":"","html":"for better timings","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"290px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"new transitions","media":"text","type":"p","imageId":"","image":"","html":"NEW TRANSITIONS","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"350px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"transitions","media":"text","type":"p","imageId":"","image":"","html":"slide, fade, scale, skew and rotate layers even in 3D","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5100\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"390px","left":"499px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"interface revamp","media":"text","type":"p","imageId":"","image":"","html":"INTERFACE REVAMP","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"450px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for easy and clear work","media":"text","type":"p","imageId":"","image":"","html":"working with the plugin is more easy","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5800\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"490px","left":"499px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"5","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"65","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg4.jpg","thumbnailId":"","thumbnail":"","slidedelay":"9500","timeshift":"-3000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"&","media":"text","type":"p","imageId":"","image":"","html":"&","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"200px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"-17px","left":"915px","style":"opacity: .3; font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"responsive","media":"text","type":"h1","imageId":"","image":"","html":"RESPONSIVE","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"400\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"40\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"60px","left":"800px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"mobile ready","media":"text","type":"h2","imageId":"","image":"","html":"mobile ready","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-60\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"60\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#286e89\\\"}","top":"100","left":"801","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"version","media":"text","type":"h1","imageId":"","image":"","html":"VERSION","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"450\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, HelveticaNeue-UltraLight, HelveticaNeue-Light, HelveticaNeue, Helvetica, Arial, serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#29768f\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"497px","left":"788px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5","media":"text","type":"h3","imageId":"","image":"","html":"5","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"450\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"400\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"220px","left":"912px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"text left half","media":"text","type":"h1","imageId":"","image":"","html":"<span style=\\\"color: #286e89;\\\">WITH HUGE<\/span><br>AND","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3500\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-90\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"461px","left":"767px","style":"font-weight: 300; text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"text right half","media":"text","type":"h3","imageId":"","image":"","html":"<span style=\\\"color: #286e89;\\\">PERFORMANCE<\/span><br>FEATURE UPDATE","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3500\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"461px","left":"943px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"tablet","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-a-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"2010\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"765px\\\"}","top":"180px","left":"-82px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"slider shadow","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-a-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"2010\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"495px","left":"135px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"slide one","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-a-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"275px","left":"135px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"slide two","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-a-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"275px","left":"135px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"touch","media":"img","type":"p","imageId":"25","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-a-6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1\\\",\\\"delayin\\\":\\\"3498\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeOutSine\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"10\\\",\\\"scaleyout\\\":\\\"10\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"476px","left":"436px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"touching hand","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-a-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"475px","left":"383px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph performance v5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"400px\\\",\\\"background\\\":\\\"#29768f\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"180px","left":"610px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph performance v4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"50px\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"530px","left":"590px","style":"opacity: .5","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"8x performance","media":"text","type":"p","imageId":"","image":"","html":"8x<br>performance","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"line-height\\\":\\\"25px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"589px","left":"533px","style":"font-style: italic; text-align: center; font-weight: 500; opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph features v5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"200px\\\",\\\"background\\\":\\\"#29768f\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"380px","left":"410px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph features v4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"50px\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"530px","left":"390px","style":"opacity: .5","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"many new features","media":"text","type":"p","imageId":"","image":"","html":"many new<br>features","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"line-height\\\":\\\"25px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"589px","left":"349px","style":"font-style: italic; text-align: center; font-weight: 500; opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive","media":"img","type":"p","imageId":"50","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-responsive.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"520px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy","media":"img","type":"p","imageId":"46","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-layers.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"450px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy","media":"img","type":"p","imageId":"47","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-mobile.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6900\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"380px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy","media":"img","type":"p","imageId":"48","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-options.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7100\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"310px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy","media":"img","type":"p","imageId":"49","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-performance.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"240px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy","media":"img","type":"p","imageId":"51","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-slideshow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"170px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy","media":"img","type":"p","imageId":"54","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-youtube.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"520px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"52","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-vimeo.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"450px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"44","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-html5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"380px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"45","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-ios.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"310px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"43","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-android.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7800\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"240px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"53","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/feature-wordpress.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"8000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"170px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"4","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"27","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-b-bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"intorducing","media":"text","type":"p","imageId":"","image":"","html":"introducing","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-50\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"600\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"50\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"44%","left":"50%","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"parallax layers","media":"text","type":"p","imageId":"","image":"","html":"PARALLAX LAYERS","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"250\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-50\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"600\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"50\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"50%","left":"50%","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"bokeh","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"120%\\\",\\\"height\\\":\\\"auto\\\"}","top":"30%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants bg","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"353px","left":"237px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants far","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"453px","left":"483px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants mid","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"150\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"150\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"5\\\"}","url":"","target":"_self","styles":"{}","top":"456px","left":"586px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants close","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"7\\\"}","url":"","target":"_self","styles":"{}","top":"421px","left":"659px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lens 1","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-b1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-90\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"90\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3.75\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lens 2","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-b3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lens 3","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-b2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-70\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"70\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2.25\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lens 4","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-b4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-60\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"60\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1.5\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lens 5","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-b5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\".75\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lens 6","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-b7.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-40\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"40\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lens 7","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-b8.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-30\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"30\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-.75\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lens 8","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-b6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-20\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"20\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1.5\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lens 9","media":"img","type":"p","imageId":"","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/slide-b-b9.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-10\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"10\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2.25\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"-329px","left":"-298px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"move your mouse","media":"text","type":"p","imageId":"","image":"","html":"Move your mouse<br>\r\nover this slide!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"35\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"47%","left":"690","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"mouse","media":"img","type":"p","imageId":"30","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/mouse.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"45%","left":"585px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"fancy parallax effect","media":"text","type":"p","imageId":"","image":"","html":"FANCY PARALLAX EFFECT","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-45\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-1\\\",\\\"transformoriginin\\\":\\\"left bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"45\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"right bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#849e00\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"4\\\"}","top":"560px","left":"50px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"by mouse move","media":"text","type":"p","imageId":"","image":"","html":"by mouse move","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-45\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"right top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"45\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left top 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"600px","left":"50px","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"11","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"787","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg51.jpg","thumbnailId":"","thumbnail":"","slidedelay":"5500","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"blur bg","media":"img","type":"p","imageId":"68","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/bg31.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.1\\\",\\\"scaleyin\\\":\\\"1.1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"embeddig videos?","media":"text","type":"p","imageId":"","image":"","html":"embedding videos?","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-70\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"70\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffe9db\\\"}","top":"50%","left":"50%","style":"font-weight: 300; background: white; background: rgba(255,255,255,.2);","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Glass","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"20\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% -150\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"-20\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% -150\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"660px\\\",\\\"height\\\":\\\"380px\\\"}","top":"100px","left":"50%","style":"background: white; background: rgba(255,255,255,.2); box-shadow: 0px 5px 70px -20px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Video","media":"html","type":"p","imageId":"","image":"","html":"<iframe src=\\\"\/\/player.vimeo.com\/video\/15069551?title=0&byline=0&portrait=0&color=f75402\\\" width=\\\"640\\\" height=\\\"360\\\" frameborder=\\\"0\\\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"20\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% -150\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"-20\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% -150\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"110px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"youtube","media":"img","type":"p","imageId":"71","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/youtube-color.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutCubic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-180\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"300\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutCubic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"360\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80%","left":"35%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"vimeo","media":"img","type":"p","imageId":"70","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/vimeo-color.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2550\\\",\\\"easingin\\\":\\\"easeInOutCubic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-270\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutCubic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"270\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"html5","media":"img","type":"p","imageId":"69","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/html5-color.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-300\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2600\\\",\\\"easingin\\\":\\\"easeInOutCubic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutCubic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"180\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80%","left":"65%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feat","media":"text","type":"p","imageId":"","image":"","html":"video","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"3300\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"4\\\",\\\"scaleyout\\\":\\\"4\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"15\\\",\\\"color\\\":\\\"#ffdcc7\\\"}","top":"630px","left":"35%","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feat 2","media":"text","type":"p","imageId":"","image":"","html":"video","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"3350\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"4\\\",\\\"scaleyout\\\":\\\"4\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"15\\\",\\\"color\\\":\\\"#ffdcc7\\\"}","top":"630px","left":"50%","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feat 3","media":"text","type":"p","imageId":"","image":"","html":"video + audio","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"3400\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"4\\\",\\\"scaleyout\\\":\\\"4\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"15\\\",\\\"color\\\":\\\"#ffdcc7\\\"}","top":"630px","left":"65%","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"rich media support","media":"text","type":"p","imageId":"","image":"","html":"RICH MEDIA SUPPORT ","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"150\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-150\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffe9db\\\"}","top":"30px","left":"30px","style":"font-weight: 300; background: black; background: rgba(0,0,0,.2);","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"with optional autoplay","media":"text","type":"p","imageId":"","image":"","html":"WITH OPTIONAL AUTOPLAY","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-150\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"150\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"-60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffe9db\\\"}","top":"30px","left":"835px","style":"font-weight: 300; background: black; background: rgba(0,0,0,.2);","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"21,105","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"82","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg6b.jpg","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"circle","media":"img","type":"p","imageId":"79","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/circle.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"155px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"circle 2","media":"img","type":"p","imageId":"79","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/circle.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"155px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"&","media":"text","type":"p","imageId":"","image":"","html":"&","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"200px\\\",\\\"color\\\":\\\"#f06a52\\\"}","top":"334px","left":"56px","style":"font-weight: 300; opacity: .4","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"all these features","media":"text","type":"p","imageId":"","image":"","html":"ALL THESE FEATURES","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#bd5949\\\"}","top":"420px","left":"20px","style":"font-weight: 300; background: white; background: rgba(255,255,255,.85)","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"much more!","media":"text","type":"p","imageId":"","image":"","html":"much more!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"-60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#bd5949\\\"}","top":"460px","left":"173px","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"to create","media":"text","type":"p","imageId":"","image":"","html":"...to create","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"right bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"right bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#bd5949\\\"}","top":"420px","left":"1113px","style":"font-weight: 500; text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"the best slider","media":"text","type":"p","imageId":"","image":"","html":"THE BEST SLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"3250\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"90\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"260px\\\",\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#f06a52\\\"}","top":"460px","left":"990px","style":"font-weight: 300; text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"with no compromises","media":"text","type":"p","imageId":"","image":"","html":"with no compromises!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.5\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#d9482b\\\"}","top":"505px","left":"983px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"ls5box","media":"img","type":"p","imageId":"78","image":"http:\/\/wp1.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/ls5box.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"180px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"other demo sliders","media":"text","type":"p","imageId":"","image":"","html":"Please check the other demo sliders","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"24px\\\",\\\"color\\\":\\\"#9c8b9c\\\"}","top":"28px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow up","media":"img","type":"p","imageId":"616","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/arrow-up.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"4200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"9px","left":"837px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]},{"properties":{"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Previous demo slider with 2D transitions","width":"1280","height":"720","responsive":"on","maxwidth":"","responsiveunder":"0","sublayercontainer":"0","autostart":"on","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","skin":"fullwidth","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 50px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","hoverprevnext":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"24,25,27,28,34,35,37,38,110,113","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4500","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Ladybug","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/ladybug.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"4600\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"-10\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"544px","left":"333px","style":"","id":"","class":"","title":"","alt":"Ladybug","rel":""},{"subtitle":"welcome to","media":"text","type":"h5","imageId":"","image":"","html":"welcome to","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"350px\\\",\\\"height\\\":\\\"100px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"100px\\\",\\\"color\\\":\\\"#eee\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"257px","left":"50%","style":"text-align: center; background: black; background: rgba(0,0,0,.75);  font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"LAYERSLIDER","media":"text","type":"h5","imageId":"","image":"","html":"LAYERSLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"400px\\\",\\\"height\\\":\\\"100px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"100px\\\",\\\"color\\\":\\\"#444\\\",\\\"background\\\":\\\"white\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"363px","left":"50%","style":"text-align: center; font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"The","media":"text","type":"h5","imageId":"","image":"","html":"The","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2.5\\\",\\\"scaleyin\\\":\\\"2.5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"100px\\\",\\\"height\\\":\\\"70px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"40px\\\",\\\"line-height\\\":\\\"70px\\\",\\\"color\\\":\\\"white\\\",\\\"background\\\":\\\"#cf431d\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"249px","left":"384px","style":"text-align: center; font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"content slider","media":"text","type":"h5","imageId":"","image":"","html":"content slider","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1600\\\",\\\"easingin\\\":\\\"easeInOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"5\\\",\\\"scaleyin\\\":\\\"5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"285px\\\",\\\"height\\\":\\\"70px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"40px\\\",\\\"line-height\\\":\\\"70px\\\",\\\"color\\\":\\\"white\\\",\\\"background\\\":\\\"#cf431d\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"249px","left":"490px","style":"text-align: center; font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"with","media":"text","type":"h5","imageId":"","image":"","html":"with","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2.5\\\",\\\"scaleyin\\\":\\\"2.5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"115px\\\",\\\"height\\\":\\\"70px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"40px\\\",\\\"line-height\\\":\\\"70px\\\",\\\"color\\\":\\\"white\\\",\\\"background\\\":\\\"#cf431d\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"249px","left":"781px","style":"text-align: center;  font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"breathtaking","media":"text","type":"h5","imageId":"","image":"","html":"breathtaking","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1800\\\",\\\"easingin\\\":\\\"easeInOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"5\\\",\\\"scaleyin\\\":\\\"5\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"270px\\\",\\\"height\\\":\\\"70px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"40px\\\",\\\"line-height\\\":\\\"70px\\\",\\\"color\\\":\\\"white\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"325px","left":"384px","style":"text-align: center; background: black; background: rgba(0,0,0,.75); font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"transitions","media":"text","type":"h5","imageId":"","image":"","html":"transitions","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"5\\\",\\\"scaleyin\\\":\\\"5\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"236px\\\",\\\"height\\\":\\\"70px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"40px\\\",\\\"line-height\\\":\\\"70px\\\",\\\"color\\\":\\\"white\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"325px","left":"660px","style":"text-align: center; background: black; background: rgba(0,0,0,.75); font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"and","media":"text","type":"h5","imageId":"","image":"","html":"and","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2100\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2.5\\\",\\\"scaleyin\\\":\\\"2.5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"110px\\\",\\\"height\\\":\\\"70px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"40px\\\",\\\"line-height\\\":\\\"70px\\\",\\\"color\\\":\\\"#444\\\",\\\"background\\\":\\\"white\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"401px","left":"384px","style":"text-align: center;  font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"awesome","media":"text","type":"h5","imageId":"","image":"","html":"awesome","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1700\\\",\\\"easingin\\\":\\\"easeInOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"5\\\",\\\"scaleyin\\\":\\\"5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"205px\\\",\\\"height\\\":\\\"70px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"40px\\\",\\\"line-height\\\":\\\"70px\\\",\\\"color\\\":\\\"#444\\\",\\\"background\\\":\\\"white\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"401px","left":"500px","style":"text-align: center;  font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"features","media":"text","type":"h5","imageId":"","image":"","html":"features","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2.5\\\",\\\"scaleyin\\\":\\\"2.5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"185px\\\",\\\"height\\\":\\\"70px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"40px\\\",\\\"line-height\\\":\\\"70px\\\",\\\"color\\\":\\\"#444\\\",\\\"background\\\":\\\"white\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"401px","left":"711px","style":"text-align: center; font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"76,77,78,79","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg3.jpg","thumbnailId":"","thumbnail":"","slidedelay":"5000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50px\\\",\\\"color\\\":\\\"#eee\\\",\\\"background\\\":\\\"#2e69ad\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"200px","left":"20px","style":"text-align: center; font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"touch-enabled","media":"text","type":"h5","imageId":"","image":"","html":"touch-enabled","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#f0f6fd\\\"}","top":"205px","left":"85px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50PX\\\",\\\"color\\\":\\\"#eee\\\",\\\"background\\\":\\\"#2e69ad\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"260px","left":"20px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"responsive","media":"text","type":"h5","imageId":"","image":"","html":"responsive","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#f0f6fd\\\"}","top":"265px","left":"85px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"with timed layers   captions","media":"text","type":"h5","imageId":"","image":"","html":"with timed layers\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0captions","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"25px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"25px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#f0f6fd\\\",\\\"background\\\":\\\"#2e69ad\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"90%","left":"79%","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"&","media":"text","type":"h5","imageId":"","image":"","html":"&","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1250\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"3\\\",\\\"scaleyout\\\":\\\"3\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"15px\\\",\\\"padding-right\\\":\\\"30px\\\",\\\"padding-bottom\\\":\\\"15px\\\",\\\"padding-left\\\":\\\"30px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"100px\\\",\\\"color\\\":\\\"#f4f8fc\\\"}","top":"570.2899932861328px","left":"1002.4000244140625px","style":" font-weight: bold;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Clown Fish Text","media":"text","type":"h5","imageId":"","image":"","html":"Clown Fish","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"450\\\",\\\"delayin\\\":\\\"1750\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"51\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"3\\\",\\\"scaleyout\\\":\\\"3\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"25px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"25px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#2e69ad\\\",\\\"background\\\":\\\"#f0f6fd\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"63%","left":"60%","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Clown Fish Photo","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/fish-showcase-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"35%","left":"60%","style":"","id":"","class":"","title":"","alt":"Clown Fish","rel":""},{"subtitle":"Blue Sergeonfish Text","media":"text","type":"h5","imageId":"","image":"","html":"Blue Sergeonfish","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"450\\\",\\\"delayin\\\":\\\"3250\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"51\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"3\\\",\\\"scaleyout\\\":\\\"3\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"25px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"25px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#2e69ad\\\",\\\"background\\\":\\\"#f0f6fd\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"63%","left":"60%","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Blue Sergeonfish Photo","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/fish-showcase-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"35%","left":"60%","style":"","id":"","class":"","title":"","alt":"Blue Sergeonfish","rel":""},{"subtitle":"Yellow Tang Text","media":"text","type":"h5","imageId":"","image":"","html":"Yellow Tang","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"450\\\",\\\"delayin\\\":\\\"4750\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"3\\\",\\\"scaleyout\\\":\\\"3\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"25px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"25px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#2e69ad\\\",\\\"background\\\":\\\"#f0f6fd\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"63%","left":"60%","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Yellow Tang Photo","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/fish-showcase-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"4500\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"35%","left":"60%","style":"","id":"","class":"","title":"","alt":"Yellow Tang","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"11","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg41.jpg","thumbnailId":"","thumbnail":"","slidedelay":"3300","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Bokeh","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/bokeh.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3600\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-35\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"35\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"-200px","left":"-78px","style":"","id":"","class":"","title":"","alt":"Bokeh","rel":""},{"subtitle":"Tucan","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tucan.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.2\\\",\\\"scaleyin\\\":\\\"1.2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"-10\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"81px","left":"434px","style":"","id":"","class":"","title":"","alt":"Tucan","rel":""},{"subtitle":"Brench","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/brench.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.2\\\",\\\"scaleyin\\\":\\\"1.2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"254px","left":"634px","style":"","id":"","class":"","title":"","alt":"Brench","rel":""},{"subtitle":"with","media":"text","type":"h5","imageId":"","image":"","html":"with","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"701\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"35\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"5\\\",\\\"scaleyout\\\":\\\"5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5px\\\",\\\"padding-right\\\":\\\"15px\\\",\\\"padding-bottom\\\":\\\"5px\\\",\\\"padding-left\\\":\\\"15px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#94e60f\\\",\\\"background\\\":\\\"black\\\"}","top":"50%","left":"30%","style":" border-radius: 5px;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"the famous","media":"text","type":"h5","imageId":"","image":"","html":"the famous","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"250\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"351\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"35\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"5\\\",\\\"scaleyout\\\":\\\"5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"20px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"20px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"40px\\\",\\\"color\\\":\\\"black\\\",\\\"background\\\":\\\"#94e60f\\\"}","top":"57%","left":"30%","style":"box-shadow: -2px -2px 15px -3px black; border-radius: 5px;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"parallax effect","media":"text","type":"h5","imageId":"","image":"","html":"parallax effect","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"35\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"5\\\",\\\"scaleyout\\\":\\\"5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"15px\\\",\\\"padding-right\\\":\\\"30px\\\",\\\"padding-bottom\\\":\\\"15px\\\",\\\"padding-left\\\":\\\"30px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"60px\\\",\\\"color\\\":\\\"#94e60f\\\",\\\"background\\\":\\\"black\\\"}","top":"67%","left":"30%","style":"box-shadow: -3px -3px 20px -3px black; border-radius: 5px;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"92,93","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"785","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/455293175_1280.jpg","thumbnailId":"","thumbnail":"","slidedelay":"3400","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Video","media":"html","type":"div","imageId":"","image":"","html":"<iframe src=\\\"http:\/\/player.vimeo.com\/video\/52123602?title=0&byline=0&portrait=0\\\" width=\\\"1280\\\" height=\\\"720\\\" frameborder=\\\"0\\\" webkitAllowFullScreen mozallowfullscreen allowFullScreen><\/iframe>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"optional atuo-play","media":"text","type":"h5","imageId":"","image":"","html":"optional auto-play","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"-90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"4000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#eee\\\"}","top":"25px","left":"85px","style":" font-weight: normal; text-shadow: 0px 0px 20px #224177;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"with auto-pause slideshow","media":"text","type":"h5","imageId":"","image":"","html":"with auto-pause slideshow","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"-90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"4000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#eee\\\"}","top":"85px","left":"85px","style":" font-weight: normal;  text-shadow: 0px 0px 20px #224177;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"easy to add full-sized or windowed videos","media":"text","type":"h5","imageId":"","image":"","html":"easy to add full-sized or windowed videos","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"4500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"25px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"25px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#224177\\\",\\\"background\\\":\\\"#eee\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"620px","left":"640px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"4000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"55px\\\",\\\"color\\\":\\\"#224177\\\",\\\"background\\\":\\\"#eee\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"20px","left":"20px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"4000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50px\\\",\\\"color\\\":\\\"#224177\\\",\\\"background\\\":\\\"#eee\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"80px","left":"20px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"click to play","media":"text","type":"h5","imageId":"","image":"","html":"click to play","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"2000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"4\\\",\\\"padding-right\\\":\\\"15\\\",\\\"padding-bottom\\\":\\\"7\\\",\\\"padding-left\\\":\\\"15\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#444f70\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"50%","left":"40%","style":" font-weight: normal; opacity: .6; filter: alpha(opacity=60);","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg7a.jpg","thumbnailId":"","thumbnail":"","slidedelay":"2000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"4000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50px\\\",\\\"color\\\":\\\"#3b173d\\\",\\\"background\\\":\\\"#eee\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"630px","left":"40px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"you can use now long backgrounds on multiple slides...","media":"text","type":"h5","imageId":"","image":"","html":"you can now use long backgrounds on multiple slides...","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"300\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"4000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#eee\\\"}","top":"635px","left":"105px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg7b.jpg","thumbnailId":"","thumbnail":"","slidedelay":"2000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"...to create a spectacular panorama slideshow!","media":"text","type":"h5","imageId":"","image":"","html":"...to create a spectacular panorama slideshow!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"4000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#eee\\\"}","top":"635px","left":"40px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"105,106","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg5.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4500","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"...and much more!","media":"text","type":"h5","imageId":"","image":"","html":"...and much more!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.5\\\",\\\"scaleyin\\\":\\\"0.5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0.5\\\",\\\"scaleyout\\\":\\\"0.5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"60px\\\",\\\"color\\\":\\\"#ff7700\\\"}","top":"100px","left":"700px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"use with any HTML content","media":"text","type":"h5","imageId":"","image":"","html":"use with any HTML content","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#85c201\\\"}","top":"335px","left":"761px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"built-in powerful API","media":"text","type":"h5","imageId":"","image":"","html":"built-in powerful API","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#85c201\\\"}","top":"395px","left":"761px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"supports all major browsers","media":"text","type":"h5","imageId":"","image":"","html":"supports all major browsers","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1800\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#85c201\\\"}","top":"455px","left":"761px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"SEO friendly","media":"text","type":"h5","imageId":"","image":"","html":"SEO friendly","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2300\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#85c201\\\"}","top":"515px","left":"761px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"sample sliders included","media":"text","type":"h5","imageId":"","image":"","html":"sample sliders included","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2800\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#85c201\\\"}","top":"575px","left":"761px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"free updates & support","media":"text","type":"h5","imageId":"","image":"","html":"free updates & support","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3300\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#85c201\\\"}","top":"635px","left":"761px","style":" font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50px\\\",\\\"color\\\":\\\"white\\\",\\\"background\\\":\\\"#85c201\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"330px","left":"700px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50px\\\",\\\"color\\\":\\\"white\\\",\\\"background\\\":\\\"#85c201\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"390px","left":"700px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50px\\\",\\\"color\\\":\\\"white\\\",\\\"background\\\":\\\"#85c201\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"450px","left":"700px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50px\\\",\\\"color\\\":\\\"white\\\",\\\"background\\\":\\\"#85c201\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"510px","left":"700px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50px\\\",\\\"color\\\":\\\"white\\\",\\\"background\\\":\\\"#85c201\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"570px","left":"700px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"+","media":"text","type":"h5","imageId":"","image":"","html":"+","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"50px\\\",\\\"height\\\":\\\"50px\\\",\\\"font-family\\\":\\\"Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"line-height\\\":\\\"50px\\\",\\\"color\\\":\\\"white\\\",\\\"background\\\":\\\"#85c201\\\",\\\"border-radius\\\":\\\"100\\\"}","top":"630px","left":"700px","style":" font-weight: normal; text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Cellphone","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/layerslider-on-cellphone.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"607px","left":"164px","style":"","id":"","class":"","title":"","alt":"LayerSlider on cellphone","rel":""},{"subtitle":"Tablet","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/layerslider-on-tablet.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"583px","left":"222px","style":"","id":"","class":"","title":"","alt":"LayerSlider on tablet","rel":""},{"subtitle":"Computer","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/layerslider-on-computer.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"457px","left":"316px","style":"","id":"","class":"","title":"","alt":"LayerSlider on computer","rel":""}]}]},{"properties":{"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Previous demo slider with 3D transitions","width":"1000","height":"500","responsive":"on","maxwidth":"","responsiveunder":"0","sublayercontainer":"0","autostart":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","skin":"borderlessdark3d","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 50px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","hoverprevnext":"on","hoverbottomnav":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autoplayvideos":"on","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"15","2d_transitions":"all","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/abyss-bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"7200","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"BG fishes far","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg-fishes-far.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"50\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"11000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"186px","left":"701px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"BG fishes far 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg-fishes-far.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"50\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"9000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"251px","left":"857px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"BG fishes middle","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg-fishes-mid.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"131px","left":"358px","style":"","id":"","class":"","title":"","alt":"Fishes","rel":""},{"subtitle":"BG fishes middle 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg-fishes-mid.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"196px","left":"255px","style":"","id":"","class":"","title":"","alt":"Fishes","rel":""},{"subtitle":"Abyss BG mask","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/abyss-bg-mask.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"0\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"0\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Abyss","rel":""},{"subtitle":"LayerSlider","media":"text","type":"h1","imageId":"","image":"","html":"LayerSlider","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"color\\\":\\\"white\\\"}","top":"30%","left":"50%","style":"text-shadow: 0px 0px 20px white; font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"3D","media":"text","type":"h1","imageId":"","image":"","html":"3D","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"120px\\\",\\\"color\\\":\\\"white\\\"}","top":"50%","left":"50%","style":"text-shadow: 0px 0px 20px white; font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"demo slider","media":"text","type":"h1","imageId":"","image":"","html":"demo slider","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"color\\\":\\\"white\\\"}","top":"70%","left":"50%","style":"text-shadow: 0px 0px 20px white; font-weight: normal;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Shark","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/shark.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"6500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"0\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"20px","left":"1000px","style":"","id":"","class":"","title":"","alt":"Shark","rel":""},{"subtitle":"Small fish far","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-fish-far.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"4000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"218px","left":"481px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Small fish far 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-fish-far.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"286px","left":"646px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Small fish middle","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-fish-mid.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"4000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"315px","left":"325px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Small fish close","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-fish-close.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"143px","left":"695px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Small fish middle 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-fish-mid.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"2800\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"84px","left":"458px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Medium fish middle","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/med-fish-mid.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"272px","left":"685px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Medium fish middle 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/med-fish-mid.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"5300\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"70px","left":"244px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Medium fish middle 3","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/med-fish-mid.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"200px","left":"196px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Medium fish close","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/med-fish-close.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2400\\\",\\\"delayin\\\":\\\"5500\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"246px","left":"339px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Big fish close","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/big-fish-close.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"3300\\\",\\\"easingin\\\":\\\"easeOutCirc\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutExpo\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"12px","left":"344px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""},{"subtitle":"Big fish close 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/big-fish-close.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6000\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"194px","left":"454px","style":"","id":"","class":"","title":"","alt":"Fish","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"36","2d_transitions":"all","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/3d-bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4500","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Small Cube 1","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-cube-blur.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"20px","left":"106px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""},{"subtitle":"Small Cube 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-cube-blur.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"50\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"700\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"153px","left":"342px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""},{"subtitle":"Small Cube 3","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-cube-blur.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"100\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"400\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"276px","left":"252px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""},{"subtitle":"Small Cube 4","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-cube-blur.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"50\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"950\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"199px","left":"585px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""},{"subtitle":"Small Cube 5","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/small-cube-blur.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"250\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"37px","left":"525px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""},{"subtitle":"Say hello","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/sayhello.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"116px","left":"86px","style":"","id":"","class":"","title":"","alt":"Say hello","rel":""},{"subtitle":"Mid cube 1","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/mid-cube-blur.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"50\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"100\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"190px","left":"135px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""},{"subtitle":"Mid cube 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/mid-cube-blur.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"150\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"340px","left":"322px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""},{"subtitle":"Mid cube 3","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/mid-cube-blur.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"100\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"300\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"398px","left":"587px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""},{"subtitle":"Big Cube 1","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/big-cube.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"100\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"300\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"211px","left":"16px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""},{"subtitle":"Big Cube 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/big-cube.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"200\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"50\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"251px","left":"746px","style":"","id":"","class":"","title":"","alt":"Cube","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"58,74","2d_transitions":"all","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/autumn-bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"5600","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Summer BG","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/summer-bg.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Spring","rel":""},{"subtitle":"Autumn L 1","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/a-l-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"9px","left":"101px","style":"","id":"","class":"","title":"","alt":"Autumn Leaf","rel":""},{"subtitle":"Autumn L 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/a-l-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"200\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"-360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"210px","left":"240px","style":"","id":"","class":"","title":"","alt":"Autumn Leaf","rel":""},{"subtitle":"Autumn L 3","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/a-l-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"400\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"193px","left":"480px","style":"","id":"","class":"","title":"","alt":"Autumn Leaf","rel":""},{"subtitle":"Autumn L 4","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/a-l-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"-360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"311px","left":"623px","style":"","id":"","class":"","title":"","alt":"Autumn Leaf","rel":""},{"subtitle":"Autumn L 5","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/a-l-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"407px","left":"371px","style":"","id":"","class":"","title":"","alt":"Autumn Leaf","rel":""},{"subtitle":"Autumn L 6","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/a-l-6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"-360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"232px","left":"392px","style":"","id":"","class":"","title":"","alt":"Autumn Leaf","rel":""},{"subtitle":"Autumn L 7","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/a-l-7.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"190px","left":"67px","style":"","id":"","class":"","title":"","alt":"Autumn Leaf","rel":""},{"subtitle":"Summer L 1","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/s-l-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"9px","left":"101px","style":"","id":"","class":"","title":"","alt":"Spring Leaf","rel":""},{"subtitle":"Summer L 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/s-l-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"210px","left":"240px","style":"","id":"","class":"","title":"","alt":"Spring Leaf","rel":""},{"subtitle":"Summer L 3","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/s-l-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2900\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"193px","left":"480px","style":"","id":"","class":"","title":"","alt":"Spring Leaf","rel":""},{"subtitle":"Summer L 4","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/s-l-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3100\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"311px","left":"623px","style":"","id":"","class":"","title":"","alt":"Spring Leaf","rel":""},{"subtitle":"Summer L 5","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/s-l-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"407px","left":"371px","style":"","id":"","class":"","title":"","alt":"Spring Leaf","rel":""},{"subtitle":"Summer L 6","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/s-l-6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"232px","left":"392px","style":"","id":"","class":"","title":"","alt":"Spring Leaf","rel":""},{"subtitle":"Summer L 7","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/s-l-7.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"190px","left":"67px","style":"","id":"","class":"","title":"","alt":"Spring Leaf","rel":""},{"subtitle":"The improve","media":"text","type":"p","imageId":"","image":"","html":"The improve","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"2000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"white\\\"}","top":"83px","left":"277px","style":"text-shadow: 0px 0px 10px white;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"is","media":"text","type":"p","imageId":"","image":"","html":"is","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"60px\\\",\\\"color\\\":\\\"white\\\"}","top":"62px","left":"451px","style":"text-shadow: 0px 0px 10px white;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"to change.","media":"text","type":"p","imageId":"","image":"","html":"to change.","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"2000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"white\\\"}","top":"83px","left":"503px","style":"text-shadow: 0px 0px 10px white;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"To be perfect","media":"text","type":"p","imageId":"","image":"","html":"To be perfect","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1750\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"white\\\"}","top":"137px","left":"367px","style":"text-shadow: 0px 0px 10px white;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"is","media":"text","type":"p","imageId":"","image":"","html":"is","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"2250\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"60px\\\",\\\"color\\\":\\\"white\\\"}","top":"116px","left":"555px","style":"text-shadow: 0px 0px 10px white;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"to change often.","media":"text","type":"p","imageId":"","image":"","html":"to change often.","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1750\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"white\\\"}","top":"137px","left":"608px","style":"text-shadow: 0px 0px 10px white;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"- Winston Churchill","media":"text","type":"p","imageId":"","image":"","html":"- Winston Churchill","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'HelveticaNeue-Light\\', \\'Helvetica Neue Light\\', \\'Helvetica Neue\\', Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"20px\\\",\\\"color\\\":\\\"white\\\"}","top":"198px","left":"722px","style":"text-shadow: 0px 0px 10px white; font-style: italic;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"68,69,77,78","2d_transitions":"all","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/cubes-bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"10050","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Blur","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/cubes-blur.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuad\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Tile 1","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tile-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"5700\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Tile 2","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tile-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"5100\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Tile 3","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tile-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"5200\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Tile 4","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tile-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"5500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Tile 5","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tile-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"5500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Tile 6","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tile-6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"4600\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Tile 7","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tile-7.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"1100\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"5100\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Tile 8","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tile-8.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"4800\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Tile 9","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/tile-9.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"4500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Tile","rel":""},{"subtitle":"Feature 1","media":"text","type":"p","imageId":"","image":"","html":"200+ 2D & 3D transitions with Transition Builder!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"-120\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"2000\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"15px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"15px\\\",\\\"border-top\\\":\\\"4px solid white\\\",\\\"font-family\\\":\\\"Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"20px\\\",\\\"color\\\":\\\"white\\\",\\\"border-radius\\\":\\\"7px\\\"}","top":"45px","left":"30px","style":"box-shadow: 0px 3px 10px -3px #002c4b; background: #02cef7; background: -moz-linear-gradient(top, #02cef7 0%, #009bba 100%); background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#02cef7), color-stop(100%,#009bba)); background: -webkit-linear-gradient(top, #02cef7 0%,#009bba 100%); background: -o-linear-gradient(top, #02cef7 0%,#009bba 100%); background: -ms-linear-gradient(top, #02cef7 0%,#009bba 100%); background: linear-gradient(to bottom, #02cef7 0%,#009bba 100%); text-shadow: 0px -1px 1px #00819c;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Feature 2","media":"text","type":"p","imageId":"","image":"","html":"Use with any HTML content including embedded videos!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-120\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"2000\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"15px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"15px\\\",\\\"border-top\\\":\\\"4px solid white\\\",\\\"font-family\\\":\\\"Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"20px\\\",\\\"color\\\":\\\"white\\\",\\\"border-radius\\\":\\\"7px\\\"}","top":"360px","left":"450px","style":"box-shadow: 0px 3px 10px -3px #002c4b; background: #02cef7; background: -moz-linear-gradient(top, #02cef7 0%, #009bba 100%); background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#02cef7), color-stop(100%,#009bba)); background: -webkit-linear-gradient(top, #02cef7 0%,#009bba 100%); background: -o-linear-gradient(top, #02cef7 0%,#009bba 100%); background: -ms-linear-gradient(top, #02cef7 0%,#009bba 100%); background: linear-gradient(to bottom, #02cef7 0%,#009bba 100%); text-shadow: 0px -1px 1px #00819c;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Feature 3","media":"text","type":"p","imageId":"","image":"","html":"Responsive with Smart Resize & Touch-enabled!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"4500\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"120\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"2000\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"15px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"15px\\\",\\\"border-top\\\":\\\"4px solid white\\\",\\\"font-family\\\":\\\"Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"20px\\\",\\\"color\\\":\\\"white\\\",\\\"border-radius\\\":\\\"7px\\\"}","top":"100px","left":"505px","style":"box-shadow: 0px 3px 10px -3px #002c4b; background: #02cef7; background: -moz-linear-gradient(top, #02cef7 0%, #009bba 100%); background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#02cef7), color-stop(100%,#009bba)); background: -webkit-linear-gradient(top, #02cef7 0%,#009bba 100%); background: -o-linear-gradient(top, #02cef7 0%,#009bba 100%); background: -ms-linear-gradient(top, #02cef7 0%,#009bba 100%); background: linear-gradient(to bottom, #02cef7 0%,#009bba 100%); text-shadow: 0px -1px 1px #00819c;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Feature 4","media":"text","type":"p","imageId":"","image":"","html":"Multisite, Multi-language & Localization ready!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6000\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"120\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"2000\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10px\\\",\\\"padding-right\\\":\\\"15px\\\",\\\"padding-bottom\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"15px\\\",\\\"border-top\\\":\\\"4px solid white\\\",\\\"font-family\\\":\\\"Helvetica, Arial, sans-serif\\\",\\\"font-size\\\":\\\"20px\\\",\\\"color\\\":\\\"white\\\",\\\"border-radius\\\":\\\"7px\\\"}","top":"400px","left":"10px","style":"box-shadow: 0px 3px 10px -3px #002c4b; background: #02cef7; background: -moz-linear-gradient(top, #02cef7 0%, #009bba 100%); background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#02cef7), color-stop(100%,#009bba)); background: -webkit-linear-gradient(top, #02cef7 0%,#009bba 100%); background: -o-linear-gradient(top, #02cef7 0%,#009bba 100%); background: -ms-linear-gradient(top, #02cef7 0%,#009bba 100%); background: linear-gradient(to bottom, #02cef7 0%,#009bba 100%); text-shadow: 0px -1px 1px #00819c;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"45,46,47,48,49,50","2d_transitions":"all","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/bbb-bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"6000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Clouds far","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/bbb-clouds-far.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"50000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInQuad\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"-90px","left":"500px","style":"","id":"","class":"","title":"","alt":"Clouds","rel":""},{"subtitle":"Clouds close","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/bbb-clouds-close.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"0\\\",\\\"delayin\\\":\\\"10000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"40000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"-60px","left":"1000","style":"","id":"","class":"","title":"","alt":"Clouds","rel":""},{"subtitle":"Background mask","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/bbb-bg-mask.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"0\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0","left":"0","style":"","id":"","class":"","title":"","alt":"Mask","rel":""},{"subtitle":"Video frame","media":"html","type":"div","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"510px\\\",\\\"height\\\":\\\"291px\\\",\\\"background\\\":\\\"white\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"154px","left":"465px","style":"box-shadow: 0px 5px 35px -2px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Embedded video (DIV sublayer)","media":"html","type":"div","imageId":"","image":"","html":"<iframe src=\\\"http:\/\/player.vimeo.com\/video\/79287693?title=0&byline=0&portrait=0&color=e4f000\\\" width=\\\"500\\\" height=\\\"281\\\" frameborder=\\\"0\\\" webkitAllowFullScreen mozallowfullscreen allowFullScreen><\/iframe>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"159","left":"470","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Easy to embed...","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/easy.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"35px","left":"715px","style":"","id":"","class":"","title":"","alt":"Easy to embed","rel":""},{"subtitle":"Features","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/vfeatures.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"37px","left":"188px","style":"","id":"","class":"","title":"","alt":"Features","rel":""},{"subtitle":"Butterfly","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/bi-colored-butterfly-source_ijc.gif","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"304px","left":"159px","style":"","id":"","class":"","title":"","alt":"Butterfly","rel":""},{"subtitle":"Thinking about acorn","media":"img","type":"p","imageId":"","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/plugins\/LayerSlider\/sampleslider\/acorn.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"16000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"2000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"119px","left":"234px","style":"","id":"","class":"","title":"","alt":"Acorn","rel":""}]}]},{"properties":{"post_type":["attachment"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Full width demo slider","width":"100%","height":"500px","maxwidth":"","forceresponsive":"on","responsiveunder":"1280","sublayercontainer":"1280","autostart":"on","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","skin":"noskin","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","lazyload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"629","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"salad side","media":"img","type":"p","imageId":"630","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/s1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"300\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-50\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"220\\\",\\\"easingout\\\":\\\"easeInOutQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% top 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"280px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad side close blur","media":"img","type":"p","imageId":"631","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/s2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"30\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1720\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".9\\\",\\\"scaleyin\\\":\\\".9\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"300\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom  0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"230px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad","media":"img","type":"p","imageId":"632","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/s2.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"250\\\",\\\"durationin\\\":\\\"950\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-8\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"270\\\",\\\"easingout\\\":\\\"easeInOutQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"65%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad","media":"img","type":"p","imageId":"633","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/s1.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1720\\\",\\\"easingin\\\":\\\"easeInOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".7\\\",\\\"scaleyin\\\":\\\".7\\\",\\\"offsetxout\\\":\\\"-800\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"195px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"freas features","media":"text","type":"p","imageId":"","image":"","html":"FRESH FEATURES","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#82d10c\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"150px","left":"116px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for starter","media":"text","type":"p","imageId":"","image":"","html":"for starter","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"31px\\\",\\\"color\\\":\\\"#6db509\\\"}","top":"190px","left":"125px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow left","media":"img","type":"p","imageId":"642","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/left.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-40\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-40\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#3","target":"_self","styles":"{}","top":"460px","left":"610px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow right","media":"img","type":"p","imageId":"641","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#2","target":"_self","styles":"{}","top":"460px","left":"650px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"629","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"lamb far","media":"img","type":"p","imageId":"636","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/l1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"300\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-300\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{}","top":"157px","left":"284px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lamb middle","media":"img","type":"p","imageId":"637","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/l2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"600\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"20px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lamb close","media":"img","type":"p","imageId":"638","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/l3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"900\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-900\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{}","top":"37px","left":"564px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"spicy parallax","media":"text","type":"p","imageId":"","image":"","html":"SPICY PARALLAX EFFECT","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"10\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#f04705\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"170px","left":"174px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for main course","media":"text","type":"p","imageId":"","image":"","html":"for main course","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"31px\\\",\\\"color\\\":\\\"#f04705\\\"}","top":"210px","left":"183px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow left","media":"img","type":"p","imageId":"642","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/left.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"#1","target":"_self","styles":"{}","top":"430px","left":"210px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow right","media":"img","type":"p","imageId":"641","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"#3","target":"_self","styles":"{}","top":"430px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"629","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"cake far","media":"img","type":"p","imageId":"639","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/d1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"400\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"129px","left":"487px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cake close","media":"img","type":"p","imageId":"640","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/d2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"104px","left":"70px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"sweet transitions","media":"text","type":"p","imageId":"","image":"","html":"SWEET TRANSITIONS","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#544f8c\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"320px","left":"830px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for dessert","media":"text","type":"p","imageId":"","image":"","html":"for dessert","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"31px\\\",\\\"color\\\":\\\"#544f8c\\\"}","top":"360px","left":"836px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow left","media":"img","type":"p","imageId":"642","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/left.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#2","target":"_self","styles":"{}","top":"430px","left":"960px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow right","media":"img","type":"p","imageId":"641","image":"http:\/\/prod.dev.kreaturamedia.com\/wp-content\/uploads\/2013\/12\/right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#1","target":"_self","styles":"{}","top":"430px","left":"1000px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]},{"properties":{"title":"Carousel demo","width":"1280","height":"720","responsive":"on","responsiveunder":"0","sublayercontainer":"0","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","twowayslideshow":"on","loops":"0","forceloopnum":"on","autoplayvideos":"on","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","keybnav":"on","touchnav":"on","skin":"carousel","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 50px;","navprevnext":"on","navbuttons":"on","thumb_nav":"always","thumb_width":"100","thumb_height":"60","thumb_container_width":"60%","thumb_active_opacity":"35","thumb_inactive_opacity":"100","imgpreload":"on","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/tablet.png","thumbnail":"","slidedelay":"4000","new_transitions":"on","slidedirection":"right","timeshift":"0","durationin":"1500","easingin":"easeInOutQuint","delayin":"0","durationout":"1500","easingout":"easeInOutQuint","delayout":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Price","type":"h6","image":"","html":"only $499","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"600","rotatein":"30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#ff7700\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"70%","left":"25%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Sample price","type":"h6","image":"","html":"Sample price","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"500","rotatein":"-30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"63%","left":"25%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/computer.png","thumbnail":"","slidedelay":"4000","new_transitions":"on","slidedirection":"right","timeshift":"0","durationin":"1500","easingin":"easeInOutQuint","delayin":"0","durationout":"1500","easingout":"easeInOutQuint","delayout":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Price","type":"h6","image":"","html":"only $1299","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"600","rotatein":"30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#ff7700\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"80%","left":"20%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Sample price","type":"h6","image":"","html":"Sample price","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"500","rotatein":"-30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"73%","left":"20%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","background":"http:\/\/wp1.dev:8888\/wp-content\/plugins\/LayerSlider\/sampleslider\/phone.png","thumbnail":"","slidedelay":"4000","new_transitions":"on","slidedirection":"right","timeshift":"0","durationin":"1500","easingin":"easeInOutQuint","delayin":"0","durationout":"1500","easingout":"easeInOutQuint","delayout":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Price","type":"h6","image":"","html":"only $199","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"600","rotatein":"30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#ff7700\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"50%","left":"80%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Sample price","type":"h6","image":"","html":"Sample price","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"500","rotatein":"-30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"43%","left":"80%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":""}]}]}]